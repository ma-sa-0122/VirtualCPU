MAIN    START

INPUT   IN      STR, =256

; 何文字目か を GR1 で保持する
; 入力した文字でくり返し
loop    LD       GR0, STR, GR1  ; 一文字受け取って GR0 へ
        LAD      GR1, 1, GR1    ; ADDA GR1, =1 と同じ。メモリを削減できる
        CPL      GR0, =#0080    ; asciiコードの範囲外か
        JPL      NUMTOS         ; 範囲外なら文字じゃないのでループ終わり

        ; 文字が演算子か？
        CPA      GR0, ='+'      ; 文字 '+' と比較
        JZE      PLUS           ; 対応する計算 PLUS に飛ぶ
        CPA      GR0, ='-'
        JZE      MINUS
        CPA      GR0, ='*'
        JZE      MUL
        CPA      GR0, ='/'
        JZE      DIV

        ; 演算子じゃないなら数字なので保持
        SUBA     GR0, =#0030    ; 数字を 数値 に変換
        LD       GR2, GR0       ; GR2 に数値を保存
        JUMP     loop

; 対応する計算
; + のとき
PLUS    LD       GR0, STR, GR1
        LAD      GR1, 1, GR1
        SUBA     GR0, =#0030
        LD       GR3, GR0       ; 足す数を GR3 に保持
        ADDA     GR2, GR3       ; 実際に足し算を行う
        JUMP     loop           ; まだ後ろに式が続いてるかもしれないのでジャンプ
; - のとき
MINUS   LD       GR0, STR, GR1
        LAD      GR1, 1, GR1
        SUBA     GR0, =#0030
        LD       GR3, GR0
        SUBA     GR2, GR3       ; 実際に引き算を行う
        JUMP     loop
; * のとき
MUL     LD       GR0, STR, GR1
        LAD      GR1, 1, GR1
        SUBA     GR0, =#0030
        LD       GR3, GR0
        CPA      GR3, =0        ; 掛ける数が 0 じゃないかの確認
        JZE      M_END          ; 0 だったら計算しないで M_END に
        LAD      GR4, 0         ; GR4 の初期化
        LAD      GR5, 0         ; GR5 の初期化
        ; 実際に掛け算を行う
M_MAIN  LAD      GR4, 1, GR4    ; GR4 に 1 を足す
        ADDA     GR5, GR2       ; 一時的に GR5 に GR2 を足す。掛け算の結果が GR5 に格納
        CPA      GR4, GR3       ; カウンタ と 繰り返す回数 を比較
        JMI      M_MAIN         ; MUL に戻ると、文字を取り出すところから動いてしまう
M_END   LD       GR2, GR5       ; 掛け算の結果を GR2 に移す
        JUMP     loop
; / のとき
DIV     LD       GR0, STR, GR1
        LAD      GR1, 1, GR1
        SUBA     GR0, =#0030
        LD       GR3, GR0
        CPA      GR3, =0        ; 割る数が 0 じゃないかの確認
        JZE      E_DIV0         ; 0 だったら E_DIV0 に飛ぶ
        LAD      GR4, 0         ; GR4 の初期化
        ; 実際に割り算を行う
D_MAIN  CPA      GR2, GR3       ; 割られる数・残り と 割る数を比較
        JMI      D_END          ; 残り < 割る数 なら D_END に飛ぶ
        LAD      GR4, 1, GR4    ; GR4 に 1 を足す
        SUBA     GR2, GR3       ; GR2 - 割る数。一回割った残りが GR2 に再格納される
        JUMP     D_MAIN         ; DIV に戻ると、文字を取り出すところから動いてしまう
D_END   LD       GR3, GR2       ; 余りを GR3 に移す
        LD       GR2, GR4       ; 割り算の結果を GR2 に移す
        JUMP     loop

; 計算結果の出力
NUMTOS  LAD     GR3, 0          ; このあと使う GR3, GR4 レジスタを初期化
        LAD     GR4, 0
        CPL     GR2, =0         ; 値が 0 じゃなければ、DIV10 に飛ぶ
        JNZ     DIV10
        PUSH    0               ; 値が 0 なら、0 を積んで 桁数を1にして SETANS へ
        LAD     GR4, 1
        ST      GR4, anslen
        JUMP    SETANS
DIV10   CPL     GR2, =0         ; 値が 0 になるまでループ
        JZE     SETANS
        ; GR2 / 10 をして、商を GR3 に
        CPA     GR2, =10
        JMI     STACK
        SUBA    GR2, =10
        LAD     GR3, 1, GR3
        JUMP    DIV10
        ; GR2 / 10 が終わったら、余りは GR2 に入っている
STACK   PUSH    0, GR2          ; インデックス修飾で GR2 の値を PUSH
        LD      GR2, GR3        ; 商を GR2 に移動
        LAD     GR3, 0          ; GR3 を初期化
        LAD     GR4, 1, GR4     ; 桁数を GR4 に保持
        ST      GR4, anslen     ; 桁数を anslen にも格納
        JUMP    DIV10

; スタックから取り出して数字列を作る。今何桁目 を GR3 に入れるとする
SETANS  CPL     GR4, GR3        ; 全桁終わるまで繰り返し
        JZE     OUTPUT
        POP     GR2             ; スタックから取り出し
        ADDA    GR2, =#0030     ; 数値 を 数字 に変換
        ST      GR2, ans, GR3   ; インデックス修飾で「何桁目」を指定する
        LAD     GR3, 1, GR3     ; 今読んだ桁数を増やす
        JUMP    SETANS

; 答えの出力
OUTPUT  OUT     ans, anslen
        RET

; 0除算のエラー文を出力
E_DIV0  OUT     ='Error: divided by 0', =19
        RET

STR     DS      256
anslen  DC      1               ; 答えの桁数
ans     DS      5               ; 値は 0 ~ 65535 の最大5桁

        END