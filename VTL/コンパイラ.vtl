00001 ; user input
00001 C=?
00002 ; get a char, and assign it to C
00002 C=??
00003 ; call isValue. if C isnot value, goto ERROR
00003 #=10000
00004 #=5+(19995*(R=0))
00005 ; call Read_Value. C -> space
00005 #=11000
00006 ; if C isnot space(32), goto ERROR
00006 #=7+(19993*(1-(C=32)))
00007 ; read left-side, and assign it to L
00007 L=??
00008 ; read "="
00008 C=??

00009 ; read right-side. make AST
00009 ; expr       = string | formula
00009 ; formula    = primary (("+" | "-" | "*" | "/" | "=" | "<" | ">") primary)*
00009 ; primary    = num | ident | "(" formula ")"
00009 ;
00009 ; if the first char is "(34), it must be string
00009 C=??
00010 #=11+(4*(C=34))
00011 ; string = """ str """
00011 C=??
00012 #=13+(2*(C=34))
00013 $=C
00014 #=11
00015 #=99999
00020 ; formula = primary (("+" | "-" | "*" | "/" | "=" | "<" | ">") primary)*
00020 


10000 ;
10000 ; isValue
10000 ; '0'(=48) <= C <= '9'(=57), then R=1. else => R=0 
10000 ;
10000 J=!
10001 T=C<47
10002 #=10003+(T*4)
10003 T=C>57
10004 #=10005+(T*2)
10005 R=1
10006 #=J
10007 R=0
10008 #=J
11000 ;
11000 ; Read_Value
11000 ; V=value
11000 ;
11000 I=!
11001 #=10000
11002 T=R=0
11003 #=11004+(T*7)
11004 V=C-48
11005 C=??
11006 #=10000
11007 T=R=0
11008 #=11009+(T*2)
11009 V=(V*10)+(C-48)
11010 #=11005
11011 #=I



20000 ; ERROR
20000 ?="Syntax Error!"

99999 ; end
99999 ?=""
